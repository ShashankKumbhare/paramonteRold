Package: paramonte
Type: Package
Title: The Parallel Monte Carlo Library for monte carlo simulations
Version: 0.1.0
Authors@R: c(
    person(given = "Shashank",
        family = "Kumbhare",
        role = c("aut", "cre"),
        email = "shashank.kumbhare@mavs.uta.edu"),
    person(given = "Amir",
        family = "Shahmoradi",
        role = c("aut", "cph"),
        email = "a.shahmoradi.uta.edu"))
Maintainer: Shashank Kumbhare <shashank.kumbhare@mavs.uta.edu>
Description: \cr
    This is the R interface to ParaMonte: Plain Powerful Parallel Monte Carlo library.\cr
    \cr
    What is ParaMonte?\cr
    ==================\cr
    \cr
    ParaMonte is a serial / parallel library of Monte Carlo routines for sampling\cr
    mathematical objective functions of arbitrary-dimensions, in particular,\cr
    the posterior distributions of Bayesian models in data science,\cr
    Machine Learning, and scientific inference, with the design\cr
    goal of unifying the\cr
    \cr
        - **automation** of Monte Carlo simulations,\cr
        \cr
        - **user-friendliness** of the library,\cr
        \cr
        - **accessibility** from multiple programming environments,\cr
        \cr
        - **high-performance** at runtime, and,\cr
        \cr
        - **scalability** across many parallel processors.\cr
    \cr
    \cr
    For more information on the installation, usage, and examples, visit:\cr
    \cr
        https://www.cdslab.org/paramonte \cr
    \cr
    For the API documentation, visit:\cr
    \cr
        https://www.cdslab.org/paramonte/notes/api/python\cr
    \cr
    \cr
    ParaMonte samplers\cr
    ==================\cr
    \cr
    The routines currently supported by the ParaMonte Python library include:\cr
    \cr
        ParaDRAM\cr
        \cr
            Parallel Delayed-Rejection Adaptive Metropolis-Hastings Markov\cr
            Chain Monte Carlo Sampler. For a quick start, example scripts,\cr
            and instructions on how to use he ParaDRAM sampler, type the\cr
            following commands enclosed between the comment lines\cr
            in your R session,\cr
            \cr
            ##################################\cr
            pm = paramonte()\cr
            help("ParaDRAM")   # the input value is case-insensitive\cr
            ##################################\cr
            \cr
            or,\cr
            \cr
            ##################################\cr
            pm = paramonte()\cr
            ?ParaDRAM          # get help on ParaDRAM sampler class\cr
            ##################################\cr
    \cr
    \cr
    Naming conventions\cr
    ==================\cr
    \cr
    - The camelCase naming style is used throughout the entire ParaMonte\cr
    library, across all programming languages. The ParaMonte library is\cr
    a multi-language cross-platform library. To increase the consistently\cr
    and similarities of all implementations, a single naming convention\cr
    had to be used for all different languages.\cr
    \cr
    - All simulation specifications start with a lowercase letter, including\cr
    scalar/vector/matrix int, float, string, or boolean variables.\cr
    \cr
    - The name of any variable that represents a vector of values is normally\cr
    suffixed with ``Vec``, for example: ``startPointVec``, ...\cr
    \cr
    - The name of any variable that represents a matrix of values is normally \cr
    suffixed with ``Mat``, for example: ``proposalStartCorMat``, ...\cr
    \cr
    - The name of any variable that represents a list of varying-size values\cr
    is normally suffixed with ``List``, like: ``variableNameList``, ...\cr
    \cr
    - All static functions or methods of classes begin with a lowercase verb.\cr
    \cr
    - Significant attempt has been made to end all boolean variables with a\cr
    passive verb, such that the full variable name virtually forms a \cr
    proposition, that is, an English-language statement that should \cr
    be either ``True`` or ``False``, set by the user. \cr
    \cr
    \cr
    Tips\cr
    ====\cr
    \cr
    - When running the ParaMonte samplers, in particular on multiple cores \cr
    in parallel, it would be best to close any such aggressive software or\cr
    applications as **Dropbox**, **ZoneAlarm**, ... that can interfere with \cr
    the ParaMonte simulation output files, potentially causing the sampler to\cr
    crash before the successful completion of the simulation. \cr
    These situations should however happen only scarcely.\cr
    \cr
    - On Windows systems, when restarting an old interrupted ParaMonte simulation, \cr
    ensure your Python session is also restarted before the simulation restart. \cr
    This may be needed as Windows sometimes locks access to some or all of the \cr
    simulation output files.\cr
    \cr
    - To unset an already-set input simulation specification, simply set the \cr
    simulation attribute to None or re-instantiate the sampler.
    \cr.
License: GPL-3
Encoding: UTF-8
LazyData: true
Imports: R6, ggplot2, ggExtra, corrplot, mvtnorm
RoxygenNote: 7.1.1
Roxygen: list(markdown = TRUE)
Collate:
    "Err_class.R"
    "dummy2.R"
    "dummy.R"
    "capitalize.R"
    "checkArg.R"
    "checkInputPlotNames.R"
    "checkResetType.R"
    "colorBrightness.R"
    "exit.R"
    "getDevSize.R"
    "getFilePathList.R"
    "getFuncName.R"
    "getLogLinSpace.R"
    "getMaxLogFunc.R"
    "getMode.R"
    "getObjName.R"
    "getThisFileDir.R"
    "grabLegend.R"
    "isNumericString.R"
    "newWindowForPlot.R"
    "plotInNewWindow.R"
    "reportWrongPlotName.R"
    "resetPlot.R"
    "returnMultipleValues.R"
    "setRStudioActive.R"
    "sourceFolder.R"
    "getTextParaDRAMUnlocked.R"
    "OutputFileContents.R"
    "auxilMethodsForRead.R"
    "parseEverything.R"
    "readEverything.R"
    "ParaMonteSampler.R"
    "ReportFileContents.R"
    "BasePlot.R"
    "EllipsoidPlot.R"
    "RestartFileContents.R"
    "AutoCorr.R"
    "CorCovMat.R"
    "corMat.R"
    "covMat.R"
    "HeatMapPlot.R"
    "LineScatterPlot.R"
    "DensityPlot1D.R"
    "DensityPlot2D.R"
    "GridPlot.R"
    "Target.R"
    "TabularFileContents.R"
    "ParaDRAM.R"
    "paramonte_class.R"
    "paramonte-package.R"
    "zzz.R"
